#include <iostream>

// Упражнение 4.33. Используя таблицу раздела 4.12 (стр. 227), объясните, что
// делает следующее выражение:

int main() {
  int someValue, x = 2, y = 4;
  std::cin >> someValue;

  std::cout << '\n'
            << (someValue ? ++x, ++y : --x, --y) << std::endl;  // 4 или 3
  // Забавно. Из-за того, что оператор ',' имеет самый маленький приоритет, во
  // втором выражении условного оператора воспринимается только '--x', то что
  // находится в первом выражении между '?' и ':' программа обрабатывает
  // полностью. Оператор --y относится ко второму операнду оператора ',', а к
  // первому выражение "someValue ? ++x, ++y : --x". То есть программа видит
  // порядок так:
  //    (someValue ? (++x, ++y) : --x), --y
  // Таким образом в cout всегда идет результат префиксного декремента '--y'.

  std::cout << x << std::endl;
  std::cout << y << std::endl;

  // Если автором такое поведение не предполагалось, то достаточно подправить
  // порядок с помощью скобок.
  // someValue ? (++x, ++y) : (--x, --y)
}