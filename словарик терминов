* Оператор как statement (инструкция) - что-то что управляет действиями машины. Cоставная часть программы, фраза алгоритмического языка, предписывающая определённый порядок преобразования информации


* Токен (token): знак, признак, значение. Также под токеном понимается замещение объекта неким обозначением/идентификатором (часто просто целым числом или строкой). Например: идентификатор сессии это классический токен.


* Концепция (от лат. conceptio «система понимания»): комплекс взглядов чего-либо, связанных между собой и вытекающих один из другого; определенный способ понимания, трактовки каких-либо явлений; основная точка зрения.


* Компилятор - программа переводящая текст программы в машинный код попутно проверяя правильность написания программы. Если допущена ошибка она показывает где и что неправильно. Если всё правильно или есть незначительные предупреждения, то происходит перевод программы в машинный код: берётся файл, где написана программа, считывается текст, проверяется на ошибки, переводит в машинный код и сохраняет результат в файл, которыай называется исполняемым и заточен под ОС, на которой он был скомпилирован. Посл чего исполняемый файл можно запускать.


* Операция (лат. operatio «действие») — действие или их совокупность для достижения какой-либо цели. Операция (программирование) — специальный способ записи некоторых действий.


* Поток - символы поступают и передаются последовательно на протяжении определённого времени.


* Объект (синоним переменная) - сущность в цифровом пространстве, обладающая состоянием и поведением, имеющая поля и методы. 


* Ассоциация – это связь между отдельными фактами, событиями, предметами или явлениями, отражёнными в сознании человека и закреплёнными в его памяти.


* Директивы — это специальные команды, которые препроцессор распознаёт и выполняет. Все директивы начинаются со знака #. Если первый непробельный символ в строке это — #, то препроцессор будет пытаться распознать в ней свою директиву.
  Существуют следующие директивы:
  — Подключение файлов: #include, #include_next.
  — Условная компиляция: #if, #ifdef, #ifndef, #else, #elif and #endif.
  — Диагностика: #error, #warning, #line.


* Препроцессор — это компьютерная программа, принимающая данные на входе и выдающая данные, предназначенные для входа другой программы (например, компилятора).


* Выражение - конструкция на языке программирования, предназначенная для выполнения вычислений. Выражение состоит из операндов, объединенных знаками операций.


* Операнд (лат. operandum, от ореrоr - работаю, действую) в математике и в языках программирования ― аргумент операции; данные, которые обрабатываются командой; математическое выражение, задающее значение аргумента операции. Сущность, с которой оператор выполняет какие-либо действия. В операнд входят: константа, литерал, идентификатор, вызов функции, индексное выражение, выражение выбора элемента или более сложное выражение, сформированное комбинацией операндов, знаков операций и круглых скобок. Каждый операнд имеет тип.


* Оператор как оператор (позднелат. operator — работник, исполнитель, от operor — работаю, действую) - это команда, обозначающая определенное математическое или логическое действие, выполняемое с данными (операндами).


* Литерал (буквенный, дословный, точный) — запись в исходном коде компьютерной программы, представляющая собой фиксированное значение. "string", 3, 3.14, .14, 'c'


* Буфер - это область памяти, используемая для временного хранения данных при вводе или выводе. Буфера используются, когда существует разница между скоростью получения данных и скоростью их обработки или в случае, когда эти скорости переменны, например, при буферизации печати.


* Префикс — это добавочный символ или набор символов, который ставится перед именем переменной, функции или метода 


* Инкремент - увеличение переменной


* Декремент - уменьшение переменной


* Функция - явление, зависящее от другого и изменяющееся по мере изменения этого другого явления. Назначение, роль, которую выполняет определенная часть системы по отношению к целому.


* Инициализация (от англ. initialization, инициирование) — создание, активация, подготовка к работе, определение параметров. Приведение цифрового устройства или его программы в состояние готовности к использованию.


* Инициирование (от лат. initium начало, почин) - вызывать (вызвать) начало чего-либо, дать (давать) начало (импульс) чему-либо.


* Тип - образец, модель или разновидность, форма, которым соответствует известная группа предметов, явлений.

* Класс - структура данных, которая определяет тип данных и набор операций, связанных с этим типом.


* Структура — определённая взаимосвязь, взаиморасположение составных частей, строение, устройство чего-либо. Набор данных, связанных определённым образом.


* Член - ячейка чего либо. В программировании С++ в классе то что является частью класса: переменная, функция...


* Функция-член (метод) - функция, которая находится внутри класса.


* Метод класса - функция внутри класса.


* Объявление - делает имя известным программе. Оперделяет тип и имя переменной. Объявление может быть как переменной, так и функции и класса.


* Определение - резервирует место для её хранения и может снабдить переменную значением. Опредедляет что это имя может делать: если это функция, что она делает; если это класс, какие у него поля и методы; если это переменная, где эта переменная находится.


* Идентификатор - имя переменной. Уникальный признак объекта, позволяющий отличать его от других объектов.


* Область видимости (scope) - это часть программы, в которой у имени есть конеретное значение.


* константа (от лат. постоянный, неизменный) - постоянная величина (скалярная или векторная) в математике, физике, химии. Математическая константа — величина, значение которой не меняется; в этом она противоположна переменной.

* Константное выражение - выражение, которое вычисляется во время компиляции, а не во время выполнения программы.

* Специфика́ция — (от позднелат. specificatio, от лат. species — вид, разновидность и лат. facio — делаю) — документ, устанавливающий требования. документ, содержащий подробное перечисление узлов и деталей какого-либо изделия, конструкции, установки, и т. п., входящих в состав сборочного или монтажного чертежа, а также документ с перечислением условий, которым должен удовлетворять производственный заказ.

** Спецификация в программировании - структурированный набор требований/запросов (функциональность, производительность, конструктивные ограничения и атрибуты) к программному обеспечению и его внешним интерфейсам.

** Спецификатор - обозначение определённого набора требований/запроса


* lvalue (locator value) представляет собой объект, который занимает идентифицируемое место в памяти (например, имеет адрес).

* rvalue определено путём исключения, говоря, что любое выражение является либо lvalue, либо rvalue. Таким образом из определения lvalue следует, что rvalue — это выражение, которое не представляет собой объект, который занимает идентифицируемое место в памяти.


* Экземпля́р (нем. Ехеmplar ← лат. ехеmplar «образец, пример») — отдельный предмет из множества таких же предметов; образец, особь. 


* Экземпляр класса — в объектно-ориентированном программировании, описание конкретного объекта в памяти.


* Компоне́нт (от лат. componens, род. п. componentis «составляющий») — составная часть, элемент чего-либо.


* Абстраги́рование — операция мышления, состоящая в отвлечении от несущественных сторон, свойств, связей объекта (предмета или явления) с целью выделения их существенных, закономерных признаков. 


* Абстракция в программировании — это способ снизить сложность и повысить эффективность проектирования и реализации программного обеспечения за счёт сокрытия технической сложности за более простым API.


* Абстракция в ООП — это выделение общих характеристик объектов, их свойств и методов, при игнорировании деталей реализации.


* API (МФА: [ˌeɪ.piˈaɪ]; аббр. от англ. application programming interface[1]) — описание способов взаимодействия одной компьютерной программы с другими. API (интерфейс программирования приложения) упрощает процесс программирования при создании приложений, абстрагируя базовую реализацию и предоставляя только объекты или действия, необходимые разработчику. Если графический интерфейс для почтового клиента может предоставить пользователю кнопку, которая выполнит все шаги для выборки и выделения новых писем, то API для ввода/вывода файлов может дать разработчику функцию, которая копирует файл из одного места в другое, не требуя от разработчика понимания операций файловой системы, происходящих за кулисами.


* Контейнер - то что содержит другие объекты. (vector, массив)


* Шаблон - инструкция для компилятора по созданию классов или функций. Пример: создание вектора любого типа. То есть шаблон подстроится под тип, который будет задан при объявлении. Это будет дополнительной информацией, характер которой зависит от шаблона. Задаётся в угловых скобках после имени шаблона.


* Создание экземпляра по шаблону - процесс, используемый компилятором для создания классов или функций по шаблону.


* Сегментация — это разделение потенциальных клиентов на группы (сегменты) по ряду критериев.


* Ошибка сегментирования - попытка разделения объекта на сегменты (группы). К примеру индексирование.


* Определе́ние, дефини́ция — утверждение смысла слова или фразы; логическая операция, раскрывающая сущность имени посредством выделения принадлежности к определённому понятию и указание отличительной особенности имени в том классе, в котором оно определено.


* Значение слова утверждение - признавать окончательно установленным, одобрять официально, в законном порядке; санкционировать что-либо.


* Порядок - состояние налаженности, организованности, благоустроенности; правильность, систематичность чего-либо.
* Порядок в математике -  гармоничное, ожидаемое, предсказуемое состояние или расположение чего-либо.


* Вычисле́ние — математическое преобразование, позволяющее преобразовывать входящий поток информации в выходной, с отличной от первого структурой. Если смотреть с точки зрения теории информации, вычисление — это получение из входных данных нового знания с помощью математических операций.


* Преобразование — изменение образа, формы чего-либо. 
* Преобразование в математике - замена выражения другим, тождественно равным ему, выражением. К примеру используя законы алгебры можно упростить выражение.

* Сужающее преобразованиее - процесс преобразования информации с потерей.

* Преобразование типа - явное или неявное преобразование.

* Приведение типа (или автоматическое преобразование) - только неявное преоборазвание.

* Си́нтез — процесс соединения или объединения ранее разрозненных вещей или понятий в целое или набор.
