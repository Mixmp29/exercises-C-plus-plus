// Упражнение 2.38. Опишите различия выведения типа спецификаторами decltype и
// auto. Приведите пример выражения, где спецификаторы auto и decltype выедут
// тот же тип, и пример, где они выведут разные типы.

/* Для начала определение:

  auto - спецификатор типа, который определяется в момент инициализации
  переменной. Полезно когда не совсем известно какой тип будет написан. Или же
  он будет настолько громоздкий, что проще будет написать просто auto.

  auto a = 5; // int. Объявление и определение.

  decltype - спецификатор, который берёт тип возращаемого значения выражения,
  переменной, функции и т.д. без подсчёта самого выражения. Объявление
  происходит без определения (инициализации переменной). Соответсвенно поолезно,
  когда нужно обойтись без инициализации.

  decltype(a) b; // int. Только объявление.

  У decltype также есть отличия:

    * При определении типа константы верхнего уровня не игнорируются.
    * Тонкая работа с ссылками:
    * * Если ввести переменную, которая была определена как ссылка, то он
        возьмёт не тип объекта по ссылке, а тип самой ссылки вплодь до &.
    * * Некоторые выражения, такие как присвоение a = b способны вернуть
        ссылку на тип значения левого операнда.
    * * Таким же свойством обладают скобки (a) в
        спецификаторе decltype.

   Одинаковое поведение decltype и auto:

   auto c = 5; // int
   decltype(5) c; // int

   int &rc = c;

   auto d = rc+1 // int
   decltype(rc + 1) d // int

   Различное поведение:
   auto e = rc; // int
   decltype(rc) e = a; // int& e
   decltype((a)) g = c; // int& g

   const int ci = 0;

   auto i = ci; // int
   decltype(ci) i = 1; // const int

*/

int main() {
  auto a = 5;

  decltype(a) b;  // int. Только объявление.

  auto c = 5;     // int
  decltype(5) c;  // int

  int &rc = c;

  auto d = rc + 1;     // int
  decltype(rc + 1) d;  // int

  auto e = rc;          // int
  decltype(rc) e = d;   // int& e
  decltype((a)) g = c;  // int& g

  const int ci = 0;

  auto i = ci;         // int
  decltype(ci) i = 1;  // const int&
}