// Упражнение 13.45. В чем разница между ссылкой на r-значением и ссылкой на
// l-значение?

// Эфемерность - то что происходит кратковременно.

// Ссылка r-value является ссылкой на значение, когда l-value является ссылкой
// на сам объект.

// r-value может быть связано с объектом, который будет тут же удален и который
// не может быть у других пользователей: арифметические(+ - и т.д.),
// реляционные (<,<=, > и т.д.), побитовые и постфиксные операторы
// инкремента и декремента возвращают r-значение.
// Мои наблюдения: немного похоже на unique_ptr, но только по значению.

// l-value может быть связано с объектом, который будет иметь продолжительное
// время жизни: присвоение, индексирование, обращение к значению, префиксные
// операторы инкремента и декремента и т.д.

// Стоит также отметить, что переменная тип T &&, которая взяла ссылку на
// r-value является l-value, то есть эту переменную нельзя испольозвать для
// инициализации еще одной ссылки на r-value.

// Ccылку на r-value переменной типа T && можно получить через std::move();

// На данный момент в книге было только упомянуто, что std::move() не был описан
// подробно и что, возможно, он меняет адреса между объектом левого операнда
// и правым операндном, который передал r-value через std::move(). То есть из
// правого операнда значение перемещается в левый. У правого операнда уже не
// будет значения и его нельзя предположить. Перемещенный объект можно только
// либо удалить, либо присвоить ему новое значение.