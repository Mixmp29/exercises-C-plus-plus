#ifndef HPP_6_18
#define HPP_6_18

#include <vector>

// Упражнение 6.18. Напишите объявления для каждой из следующих функций. Написав
// объявления, используйте имя функции для обозначения того, что она делает.

// (a) Функция compare() возвращает значение типа bool и получает два параметра,
// являющиеся ссылками на класс matrix.

// (b) Функция change_val() возвращает итератор vector<int> и получает два
// параметра: один типа int, а второй итератор для вектора vector<int>.

class matrix {};

bool compare(const matrix& a, const matrix& b);
// Compare - переводится как сравнение. Изменение двух параметров не
// предполагается, поэтому лучше использовать const. Функция сравнивает две
// матрицы и выдает true, если они совпадают.

std::vector<int> change_val(const int val,
                            const std::vector<int>::iterator iter);
// Меняет значение элемента по итератору (адресу элемента в коллекции).
// Изменение значений параметров не предполагается.

// Преподаватель как-то учил меня, что если в теле функции параметр не меняется,
// то нужно поставить ему const. В малых программах такие объявления могут
// показаться громоздкими. Думаю в больших проектах это может уже иметь немалое
// значение. Смотришь на кучу объявлений в заголовке и уже сразу понимаешь -
// будет изменяться параметр в теле или нет.

#endif