#include <string>

// Упражнение 6.15. Объясните смысл каждого из типов параметров функции
// find_char(). В частности, почему s - ссылка на константу, а occurs - простая
// ссылка? Почему эти параметры ссылочные, а параметр 'c' типа char нет? Что
// будет, сделай мы s простой ссылкой? Что если occurs сделать константной
// ссылкой?

std::string::size_type find_char(const std::string s, char c,
                                 std::string::size_type& occurs) {
  // ...
}

/* Параметр s - является ссылкой, так как строка может быть очень длинной, а ее
 * копирование можеть плохо сказаться на производительности программы. Ссылка
 * на константу, так как изменения в строке не требуются. Если убрать
 * константность, то будет возможность сделать ошибки: поменять значения строки
 * или расширить ее. К тому же будут неправильно поняты намерения при виде
 * объявления этой фунции - можно будет подумать, что изменение строки
 * подразумевается в теле функции. Константность сразу же дает понять, что
 * никакие изменения строки вноситься не будут. */

/* Параметр occurs - является простой ссылкой, поскольку задача требует вернуть
 * несколько значений, которые будут определены или изменены после выполнения
 * работы функции. occurs является переменной, которая будет изменяться, и, если
 * сделать ее ссылкой на константу, то требуемых изменений внесено не будет.
 * Более того, это будет ошибкой, которая будет прерывать выполнение
 * программы.*/

/* Параметр с - не является ссылкой, так как в вызове функции есть потребность в
 * качестве аргумента передавать символьный литерал, который является r-value.
 * Брать ссылку можно только с l-value. Даже если это был бы аргумент char, то
 * нет никакой нужды менять и/или возращать значение параметра. Изменять в коде
 * его никак не планируется, а копирование будет незначительным для
 * производительности программы.
 */