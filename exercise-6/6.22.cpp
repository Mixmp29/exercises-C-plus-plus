#include <iostream>

// Упражнение 6.22. Напишите функцию, меняющую местами два указателя на тип int.

// Если имелось ввиду поменять местами адреса:
void swapPtrVal(int *a, int *b) {
  int *tmp = a;
  a = b;
  b = tmp;
}

// Если имелось ввиду поменять местами значения:
void swapVal(int *a, int *b) {
  int tmp = *a;
  *a = *b;
  *b = tmp;
}  // Константность параметров не нужна, так как имзеняются значения.

// Предполагаю, что первый вариант. P.S.: Нет, оказался второй. Я забыл, что
// параметр указатель берет копию адреса аргумента, то есть параметр является
// локальной переменной инициализированной копией адреса - его изменение не
// приведет к изменению адреса аргумента.

// Если все же пойти в угар:
void swapPtr(int *&a, int *&b) {
  int *tmp = a;
  a = b;
  b = tmp;
}

int main() {
  int a = 5, b = 10;
  int *ptra = &a, *ptrb = &b;

  // Некорректная обработка, значения местами не поменяются.
  swapPtrVal(ptra, ptrb);
  std::cout << *ptra << " " << *ptrb << std::endl;

  // Ок. Значения поменяются местами.
  swapVal(ptra, ptrb);
  std::cout << *ptra << " " << *ptrb << std::endl;

  // Ок. Адреса поменялись между собой. Теперь *ptra = &b, а *ptrb = a.
  swapPtr(ptra, ptrb);
  std::cout << *ptra << " " << *ptrb << std::endl;

  // Защита от неправильного использования. Ссылке в параметре должно
  // передаваться l-value, обращение к адресу выдает r-value.
  // swapPtr(&a, &b);
}