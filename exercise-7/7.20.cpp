// Упражнения 7.20. Когда полезны дружественные отношения? Укажите преимущества
// и недостатки их использования.

/* Дружественные функции полезны, когда требуется предоставить уровень доступа
 * функции, для реализации которой требуется доступ закрытых переменных-членов и
 * функций-членов. С помощью такого инструмента можно определить функции вне
 * класса, которые описывают поведение между объектами класса.
 *
 * К примеру функция сложения read. Без переменных-членов лежащих в области
 * private будет невозможна ее реализация. Если делать эту функцию членом
 * класса, то для ее вызова требовался бы объект самого класса, что являлось бы
 * довольно корявой реализацией. Объявляя функцию вне класса появляется
 * возможность суммировать объекты класса прямым вызовом имени функции, а не
 * через ее вызов как члена класса. Для ее реализации однако потребуются скрытые
 * переменные-члены, доступ к которым поможет получить дружественное
 * отношение.
 *
 * Недостатком пожалуй является то, что функцию приходится объявлять два раза.
 * Плюс, в зависимости от компилятора, есть возможно не писать объявление вне
 * класса, что способстует появлению ошибок, если придется переехать на другой
 * компилятор. Поэтому лучше писать их два раза, чтобы наверняка.
 *
 * Еще этот способ ломает правила инкапсулирования, появляется возможность
 * наделать ошибок и сломать объект.*/