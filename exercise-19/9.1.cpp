// Упражнение 9.1. Какой из контейнеров (vector, deque или list) лучше подходит
// для приведенных ниже задач? Объясните почему. Если нельзя дать предпочтение
// тому или иному контейнеру, объясните, почему?

/*
 * Чтение известного заранее количества слов и вставка их в контейнер в
 * алфавитном порядке по мере ввода. В следующей главе будет показано, что
 * ассоциативные контейнеры лучше подходят для этой задачи.
 *
 *    Добавлять элементы в начало последовательности или же в середину нет
 * никакой серьезной необходимости, слова будут добавляться только в конец.
 * Следовательно deque и list сразу отпадают. Просто string будет недостаточно,
 * поскольку он хранит только последовательность символов, а не слов. Остается
 * только вектор, элементы которого будут иметь тип string.
 *    Если бы нужна была вставка в алфавитном порядке не по мере ввода (то есть,
 * условно в файле, есть простой неупорядоченный по алфавиту текст), то пришлось
 * бы использовать list или forward_list.
 * ---
 *
 * Чтение неизвестного заранее количества слов. Новые слова всегда добавляются в
 * конец. Следующее значение извлекается из начала.
 *
 *    Те же причины что выше. Извлечение - не добавление или удаление, из
 * вектора или deque оно одинаково быстро берется. Добавлять спереди ничего не
 * нужно, поэтому подойдет вектор типа string.
 *
 * ---
 *
 * Чтение неизвестного заранее количества целых чисел из файла. Числа
 * сортируются, затем выводятся на стандартное устройство вывода.
 *
 *    Помещать числа в середину последовательности нет смысла, так как она позже
 * отсортируется. Добавления достаточно в конец, подойдут либо deque или vector,
 * однако спереди добавлять ничего не нужно. Следовательно подходит вектор типа
 * int.
 */