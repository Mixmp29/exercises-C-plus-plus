// #include <iostream>
/* В целом отличий в выполнении циклов нет. Любой цикл for можно
переделать по while и обратно. Есть только нюансы,которые нужно
учитывать, но и их можно подстроить под нужный цикл.

* В for удобно прописаны итерации, но у него громозкое определение.
* В while можно компактно уложить условия, но неудобно делать
   итерации.
* Если в for инициализировать переменную, то её нельзя использовать
  за пределами тела цикла. В while нет такого встроенного инструмента.
  С помощью скобок { } можно создать отдельный блок и там создать
  while с счетчиком итерации i, но это будет как минимум странно и
  нечитебельно. Пример:

  int main(){
  ///
    for (int i = 0; i < 10; i++){
      ...
    }
    std::cout << i  <-- ошибка, i в этой области видимости неопределён.
    ///
    int i = 0;
    while(i < 10)
    {
      ...
      i++;
    }
    std::cout << i <-- Ок
    ///
    {
      int i = 0;
      while(i < 10)
      {
        ...
        i++;
      }
    }
    std::cout << i  <-- ошибка, i в этой области видимости неопределён.
  ///
  }

  * Стоит также отметить, что счётчик итерации i в while может попросту
    затеряться в коде.

  * Дополнение: цикл for может уйти в бесконечность при использовании типа
                unsigned. Пример: отоброажение числа от 10 до 0 включительно. В
                условии программа обязательно дойдёт до -1, из-за этого
                произойдёт обращение значения в приемлемый диапазон, то есть
                число преобразуется в значение 4293967295.
                В while можно избежать данной проблемы просто переместив шаг
                итерации перед выводом значения на экран. То есть к плюсам
                использования while можно отнести более гибкая работа с
                типами и подобных случаях.

  В целом для циклов for и while есть несколько правил:

  1. Использовать for, если известно количество итераций, которые должен
     выполнить цикл для достижения конца условия.
  2. Использовать while, если неисзествно количество итераций до
     выполнения конца условия.
   */